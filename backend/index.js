const express = require('express');
const multer = require('multer');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const XLSX = require('xlsx');
const { Pool } = require('pg');

// Importar rutas de autenticaci√≥n (comentado temporalmente para pruebas)
// const authRoutes = require('./authRoutes');
const { authenticateToken, getUserEstablecimientos } = require('./auth');
const { sendConfirmationEmail } = require('./emailConfig');
const validarAccesoEstablecimiento = async (req, res, next) => {
  try {
    const user = req.user;
    const establecimiento = decodeURIComponent(req.params.establecimiento);
    if (user.role === 'ADMIN' || user.role === 'DIRECTOR') return next();
    const asignados = await getUserEstablecimientos(user.id);
    const nombresAsignados = asignados.map(e => e.nombre);
    if (!nombresAsignados.includes(establecimiento)) {
      return res.status(403).json({ success: false, error: 'Acceso denegado a este establecimiento.' });
    }
    next();
  } catch (err) {
    res.status(500).json({ success: false, error: 'Error validando acceso a establecimiento.' });
  }
};

// Configuraci√≥n de la base de datos PostgreSQL
const pool = new Pool({
  user: 'tablero_user',
  host: 'dpg-d1tfjure5dus73dhglp0-a.oregon-postgres.render.com',
  database: 'tablero_user',
  password: 'zdR9rbB8bhIke5DC7O6ANbxVnJ0PvJrM',
  port: 5432,
  ssl: { rejectUnauthorized: false }
});

// Probar conexi√≥n a la base de datos con reintentos
const MAX_DB_RETRIES = 10;
const DB_RETRY_DELAY_MS = 3000;

async function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function connectWithRetry(attempt = 1) {
  try {
    await pool.query('SELECT NOW()');
    console.log(`‚úÖ Conexi√≥n a la base de datos exitosa (intento ${attempt})`);
  } catch (err) {
    console.error(`‚ùå Error conectando a la base de datos (intento ${attempt}):`, err.message);
    if (attempt < MAX_DB_RETRIES) {
      console.log(`‚è≥ Reintentando conexi√≥n en ${DB_RETRY_DELAY_MS / 1000} segundos...`);
      await wait(DB_RETRY_DELAY_MS);
      return connectWithRetry(attempt + 1);
    } else {
      console.error('‚ùå No se pudo conectar a la base de datos despu√©s de varios intentos. Abortando.');
      process.exit(1);
    }
  }
}

// Iniciar conexi√≥n a la base de datos
connectWithRetry();

// Formatos de Excel soportados por la librer√≠a xlsx
const EXCEL_FORMATS = [
  '.xlsx',  // Excel Open XML Workbook
  '.xlsm',  // Excel Open XML Macro-Enabled Workbook
  '.xlsb',  // Excel Binary Workbook
  '.xls',   // Excel Workbook (legacy)
  '.xlt',   // Excel Template (legacy)
  '.xltx',  // Excel Open XML Template
  '.xltm',  // Excel Open XML Macro-Enabled Template
  '.ods',   // OpenDocument Spreadsheet
  '.fods',  // Flat OpenDocument Spreadsheet
  '.csv',   // Comma Separated Values
  '.txt',   // Text file
  '.rtf',   // Rich Text Format
  '.html',  // HTML file
  '.htm',   // HTML file
  '.xml',   // XML file
  '.sylk',  // Symbolic Link Format
  '.slk',   // Symbolic Link Format
  '.dif',   // Data Interchange Format
  '.prn',   // Lotus formatted text
  '.dbf',   // dBASE file
  '.wk1',   // Lotus 1-2-3 v1
  '.wk3',   // Lotus 1-2-3 v3
  '.wk4',   // Lotus 1-2-3 v4
  '.123',   // Lotus 1-2-3 v9
  '.wb1',   // Quattro Pro v1
  '.wb2',   // Quattro Pro v5
  '.wb3',   // Quattro Pro v6-8
  '.qpw',   // Quattro Pro v9+
  '.numbers' // Apple Numbers
];

// Funci√≥n para verificar si un archivo tiene un formato Excel v√°lido
function isValidExcelFormat(filename) {
  if (!filename || typeof filename !== 'string') return false;
  const ext = path.extname(filename).toLowerCase();
  return EXCEL_FORMATS.includes(ext);
}

// Funci√≥n para obtener la lista de formatos para filtros
function getExcelFormatsForFilter() {
  return EXCEL_FORMATS.filter(f => f !== '.txt'); // Excluir .txt para evitar confusiones
}

// üîç FUNCI√ìN PARA DETECTAR A√ëO AUTOM√ÅTICAMENTE DESDE EL ARCHIVO EXCEL
function detectarAnioDeArchivo(rutaArchivo) {
  try {
    console.log(`üîç [DETECTAR A√ëO] Analizando archivo: ${rutaArchivo}`);
    
    if (!fs.existsSync(rutaArchivo)) {
      console.log(`‚ùå [DETECTAR A√ëO] Archivo no existe: ${rutaArchivo}`);
      return null;
    }
    
    // Leer archivo Excel
    const workbook = XLSX.readFile(rutaArchivo);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    if (data.length < 2) {
      console.log(`‚ùå [DETECTAR A√ëO] Archivo sin datos suficientes`);
      return null;
    }
    
    // Buscar la columna PERIANO en los headers
    const headers = data[0] ? data[0].map(h => String(h).replace(/[^A-Z0-9_]/gi, '').toUpperCase()) : [];
    const anioIdx = headers.indexOf('PERIANO');
    
    if (anioIdx === -1) {
      console.log(`‚ùå [DETECTAR A√ëO] No se encontr√≥ columna PERIANO en headers:`, headers);
      return null;
    }
    
    console.log(`‚úÖ [DETECTAR A√ëO] Columna PERIANO encontrada en √≠ndice: ${anioIdx}`);
    
    // Extraer todos los a√±os v√°lidos de la columna PERIANO
    const aniosEncontrados = [];
    for (let i = 1; i < data.length; i++) { // Saltar header
      const row = data[i];
      if (row && row[anioIdx]) {
        const anioVal = String(row[anioIdx]).trim();
        if (!isNaN(Number(anioVal)) && anioVal.length === 4) {
          const anio = Number(anioVal);
          if (anio >= 2000 && anio <= 2100) { // Validar rango razonable
            aniosEncontrados.push(anio);
          }
        }
      }
    }
    
    if (aniosEncontrados.length === 0) {
      console.log(`‚ùå [DETECTAR A√ëO] No se encontraron a√±os v√°lidos en PERIANO`);
      return null;
    }
    
    // Encontrar el a√±o m√°s com√∫n
    const conteoPorAnio = {};
    aniosEncontrados.forEach(anio => {
      conteoPorAnio[anio] = (conteoPorAnio[anio] || 0) + 1;
    });
    
    const anioMasComun = Object.keys(conteoPorAnio).reduce((a, b) => 
      conteoPorAnio[a] > conteoPorAnio[b] ? a : b
    );
    
    console.log(`‚úÖ [DETECTAR A√ëO] A√±os encontrados:`, conteoPorAnio);
    console.log(`‚úÖ [DETECTAR A√ëO] A√±o m√°s com√∫n detectado: ${anioMasComun}`);
    
    return Number(anioMasComun);
    
  } catch (error) {
    console.log(`‚ùå [DETECTAR A√ëO] Error al leer Excel:`, error.message);
    return null;
  }
}

const app = express();

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Servir archivos est√°ticos del build de React (desde frontend/build)
app.use('/static', express.static(path.join(__dirname, '../frontend/build/static')));
app.use('/logo192.png', express.static(path.join(__dirname, '../frontend/build/logo192.png')));
app.use('/favicon.ico', express.static(path.join(__dirname, '../frontend/build/favicon.ico')));
app.use('/manifest.json', express.static(path.join(__dirname, '../frontend/build/manifest.json')));

// Rutas de autenticaci√≥n (definidas directamente para pruebas)
// app.use('/api/auth', authRoutes);

// Definir rutas de autenticaci√≥n directamente
app.get('/api/auth/test', (req, res) => {
  res.json({ message: 'Auth routes funcionando directamente en index.js' });
});

app.post('/api/auth/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    
    if (!username || !password) {
      return res.status(400).json({ error: 'Usuario y contrase√±a requeridos' });
    }

    res.json({
      success: true,
      message: 'Login funcionando directamente en index.js',
      user: { username, role: 'admin' }
    });

  } catch (error) {
    console.error('Error en login:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

app.post('/api/auth/register', async (req, res) => {
  try {
    const { username, email, dni, nombre, apellido, funcion } = req.body;
    
    if (!username || !email || !dni || !nombre || !apellido || !funcion) {
      return res.status(400).json({ error: 'Todos los campos son requeridos' });
    }

    // Verificar si el usuario ya existe
    const userExists = await pool.query(
      'SELECT id FROM users WHERE username = $1 OR email = $2',
      [username, email]
    );

    if (userExists.rows.length > 0) {
      return res.status(400).json({ 
        error: 'El usuario o email ya existe en el sistema' 
      });
    }

    // Generar token de confirmaci√≥n
    const confirmationToken = require('crypto').randomBytes(32).toString('hex');
    
    // Crear usuario en la base de datos
    const newUser = await pool.query(
      `INSERT INTO users (username, email, dni, nombre, apellido, funcion, confirmation_token, is_confirmed, password_hash, created_at) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW()) 
       RETURNING id, username, email, nombre, apellido`,
      [username, email, dni, nombre, apellido, funcion, confirmationToken, false, 'temp_password_hash']
    );

    // Enviar email de confirmaci√≥n
    try {
      await sendConfirmationEmail(email, username, confirmationToken);
      console.log('‚úÖ Email de confirmaci√≥n enviado a:', email);
    } catch (emailError) {
      console.error('‚ùå Error enviando email:', emailError);
      // No fallar el registro si el email falla
    }

    res.json({
      success: true,
      message: 'Usuario registrado exitosamente. Revisa tu email para confirmar tu cuenta.',
      user: newUser.rows[0]
    });

  } catch (error) {
    console.error('Error en registro:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

app.get('/api/auth/verify', (req, res) => {
  res.json({
    success: true,
    message: 'Verificaci√≥n funcionando directamente en index.js',
    user: { id: 1, username: 'test', role: 'admin' }
  });
});

// Ruta para confirmar usuario con token
app.get('/api/auth/confirmar-usuario', async (req, res) => {
  try {
    const { token } = req.query;
    
    if (!token) {
      return res.status(400).json({ 
        success: false, 
        error: 'Token de confirmaci√≥n requerido' 
      });
    }

    console.log('üîç [CONFIRMAR] Verificando token:', token);
    
    // Buscar usuario con el token
    const userResult = await pool.query(
      'SELECT id, username, email, nombre, apellido, is_confirmed, confirmation_token FROM users WHERE confirmation_token = $1',
      [token]
    );

    if (userResult.rows.length === 0) {
      console.log('‚ùå [CONFIRMAR] Token no encontrado');
      return res.status(404).json({ 
        success: false, 
        error: 'Token de confirmaci√≥n inv√°lido' 
      });
    }

    const user = userResult.rows[0];
    console.log('‚úÖ [CONFIRMAR] Usuario encontrado:', user.email);

    // Verificar si el usuario ya est√° confirmado
    if (user.is_confirmed) {
      console.log('‚ÑπÔ∏è [CONFIRMAR] Usuario ya confirmado');
      return res.status(400).json({ 
        success: false, 
        error: 'La cuenta ya est√° confirmada' 
      });
    }

    // Confirmar usuario y limpiar token
    await pool.query(
      'UPDATE users SET is_confirmed = true, confirmation_token = NULL WHERE id = $1',
      [user.id]
    );

    console.log('‚úÖ [CONFIRMAR] Usuario confirmado exitosamente:', user.email);

    res.json({
      success: true,
      message: 'Cuenta confirmada exitosamente. Ya puedes iniciar sesi√≥n.',
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        nombre: user.nombre,
        apellido: user.apellido
      }
    });

  } catch (error) {
    console.error('‚ùå [CONFIRMAR] Error confirmando cuenta:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error interno del servidor' 
    });
  }
});

// Configuraci√≥n temporal de multer - guardaremos en carpeta temporal primero
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const { establecimiento } = req.params;
    if (!establecimiento) {
      return cb(new Error('Falta datos de establecimiento'), null);
    }
    // Crear carpeta temporal para el establecimiento
    const tempDir = path.join(__dirname, 'temp', establecimiento);
    fs.mkdirSync(tempDir, { recursive: true });
    cb(null, tempDir);
  },
  filename: function (req, file, cb) {
    // Agregar timestamp para evitar conflictos
    const timestamp = Date.now();
    const ext = path.extname(file.originalname);
    const baseName = path.basename(file.originalname, ext);
    cb(null, `${baseName}_${timestamp}${ext}`);
  }
});
const upload = multer({ storage });

// Guardar archivo Excel con detecci√≥n autom√°tica de a√±o
app.post('/guardar/:establecimiento/:anio', upload.single('file'), async (req, res) => {
  try {
    const { establecimiento, anio: anioParametro } = req.params;
    console.log('üîÑ Iniciando guardado con detecci√≥n autom√°tica de a√±o');
    console.log('üìÅ Establecimiento:', establecimiento);
    console.log('üìÖ A√±o del par√°metro:', anioParametro);
    console.log('üìÑ Archivo recibido:', req.file?.originalname);
    
    if (!req.file) {
      console.log('‚ùå No se recibi√≥ archivo');
      return res.status(400).json({ success: false, error: 'No se recibi√≥ archivo.' });
    }
    
    const archivoTemporal = req.file.path;
    console.log('üìÇ Archivo temporal en:', archivoTemporal);
    
    // üîç DETECTAR A√ëO AUTOM√ÅTICAMENTE DEL ARCHIVO
    const anioDetectado = detectarAnioDeArchivo(archivoTemporal);
    console.log('üéØ A√±o detectado del archivo:', anioDetectado);
    
    // Determinar qu√© a√±o usar (detectado vs par√°metro)
    const anioFinal = anioDetectado || anioParametro;
    const cambioAutomatico = anioDetectado && anioDetectado.toString() !== anioParametro;
    
    console.log('‚úÖ A√±o final a usar:', anioFinal);
    if (cambioAutomatico) {
      console.log('üîÑ CAMBIO AUTOM√ÅTICO: de', anioParametro, 'a', anioFinal);
    }
    
    // Crear directorio final
    const dirFinal = path.join(__dirname, 'data', establecimiento, anioFinal.toString());
    fs.mkdirSync(dirFinal, { recursive: true });
    console.log('üìÅ Directorio final:', dirFinal);
    
    // Eliminar archivos Excel existentes en la carpeta final
    if (fs.existsSync(dirFinal)) {
      const archivosExistentes = fs.readdirSync(dirFinal).filter(f => 
        isValidExcelFormat(f)
      );
      console.log('üóëÔ∏è Archivos existentes a eliminar:', archivosExistentes);
      archivosExistentes.forEach(f => {
        const filePath = path.join(dirFinal, f);
        console.log('üóëÔ∏è Eliminando:', filePath);
        fs.unlinkSync(filePath);
      });
    }
    
    // Mover archivo de carpeta temporal a carpeta final
    const nombreOriginal = req.file.originalname;
    const archivoFinal = path.join(dirFinal, nombreOriginal);
    
    console.log('üì¶ Moviendo archivo:');
    console.log('  Desde:', archivoTemporal);
    console.log('  Hacia:', archivoFinal);
    
    fs.renameSync(archivoTemporal, archivoFinal);
    
    // Limpiar carpeta temporal si est√° vac√≠a
    const tempDir = path.dirname(archivoTemporal);
    try {
      const archivosTemp = fs.readdirSync(tempDir);
      if (archivosTemp.length === 0) {
        fs.rmdirSync(tempDir);
        console.log('üßπ Carpeta temporal limpiada');
      }
    } catch (e) {
      // Ignorar errores de limpieza
    }
    
    // Verificar que se guard√≥ correctamente
    const archivoExiste = fs.existsSync(archivoFinal);
    console.log('‚úÖ ¬øArchivo guardado correctamente?', archivoExiste);
    
    // Preparar respuesta
    const respuesta = {
      success: true,
      message: cambioAutomatico 
        ? `Archivo guardado correctamente. A√±o detectado autom√°ticamente: ${anioFinal}` 
        : 'Archivo guardado correctamente.',
      anioOriginal: anioParametro,
      anioUsado: anioFinal.toString(),
      cambioAutomatico,
      anioDetectado: anioDetectado || null,
      nombreArchivo: nombreOriginal
    };
    
    if (cambioAutomatico) {
      console.log('üéâ √âXITO CON CAMBIO AUTOM√ÅTICO:', respuesta);
    } else {
      console.log('‚úÖ √âXITO:', respuesta);
    }
    
    res.json(respuesta);
  } catch (err) {
    console.error('‚ùå Error al guardar:', err);
    
    // Limpiar archivo temporal en caso de error
    if (req.file && fs.existsSync(req.file.path)) {
      try {
        fs.unlinkSync(req.file.path);
        console.log('üßπ Archivo temporal limpiado despu√©s del error');
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar archivo temporal:', e.message);
      }
    }
    
    res.status(500).json({ success: false, error: err.message });
  }
});

// Listar a√±os/archivos por establecimiento
app.get('/archivos/:establecimiento', authenticateToken, validarAccesoEstablecimiento, (req, res) => {
  try {
    const establecimiento = req.params.establecimiento;
    const dir = path.join(__dirname, 'data', establecimiento);
    if (!fs.existsSync(dir)) return res.json({ archivos: [] });
    const anios = fs.readdirSync(dir).filter(f => fs.statSync(path.join(dir, f)).isDirectory());
    const archivos = anios.flatMap(anio => {
      const files = fs.readdirSync(path.join(dir, anio)).filter(f => isValidExcelFormat(f));
      return files.map(f => ({ anio, archivo: f }));
    });
    res.json({ archivos });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// Listar archivos por establecimiento y a√±o (case-insensitive)
app.get('/archivos/:establecimiento/:anio', authenticateToken, validarAccesoEstablecimiento, (req, res) => {
  try {
    const { establecimiento, anio } = req.params;
    const dataDir = path.join(__dirname, 'data');
    if (!fs.existsSync(dataDir)) return res.json({ archivos: [] });
    // Buscar carpeta de establecimiento ignorando may√∫sculas/min√∫sculas
    const estDirs = fs.readdirSync(dataDir).filter(f => fs.statSync(path.join(dataDir, f)).isDirectory());
    const estDir = estDirs.find(f => f.toLowerCase() === decodeURIComponent(establecimiento).toLowerCase());
    if (!estDir) return res.json({ archivos: [] });
    const yearDir = path.join(dataDir, estDir, anio);
    if (!fs.existsSync(yearDir)) return res.json({ archivos: [] });
    const archivos = fs.readdirSync(yearDir)
      .filter(f => isValidExcelFormat(f))
      .map(f => ({ archivo: f }));
    res.json({ archivos });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// Leer archivo Excel guardado
app.get('/leer/:establecimiento/:anio/:archivo', authenticateToken, validarAccesoEstablecimiento, async (req, res) => {
  try {
    const { establecimiento, anio, archivo } = req.params;
    console.log('Par√°metros recibidos:', { establecimiento, anio, archivo });
    
    const filePath = path.join(__dirname, 'data', establecimiento, anio, archivo);
    let fileToRead = filePath;
    
    console.log('Ruta inicial del archivo:', filePath);
    console.log('¬øExiste el archivo inicial?', fs.existsSync(fileToRead));
    
    if (!fs.existsSync(fileToRead)) {
      // Buscar ignorando may√∫sculas/min√∫sculas y espacios
      const dir = path.join(__dirname, 'data', establecimiento, anio);
      console.log('Buscando en directorio:', dir);
      console.log('¬øExiste el directorio?', fs.existsSync(dir));
      
      if (fs.existsSync(dir)) {
        const archivos = fs.readdirSync(dir);
        console.log('Archivos encontrados en el directorio:', archivos);
        
        const archivoBuscado = archivos.find(f => f.replace(/\s+/g, '').toLowerCase() === archivo.replace(/\s+/g, '').toLowerCase());
        console.log('Archivo buscado:', archivoBuscado);
        
        if (archivoBuscado) {
          fileToRead = path.join(dir, archivoBuscado);
          console.log('Archivo encontrado en:', fileToRead);
        }
      }
    }
    console.log('Archivo final a leer:', fileToRead);
    if (!fs.existsSync(fileToRead)) return res.status(404).json({ success: false, error: 'Archivo no encontrado.' });
    
    if (isValidExcelFormat(archivo)) {
      try {
        // Leer archivo Excel
        const workbook = XLSX.readFile(fileToRead);
        const sheetName = workbook.SheetNames[0]; // Primera hoja
        const worksheet = workbook.Sheets[sheetName];
        
        // Convertir a JSON
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        console.log('Datos Excel le√≠dos:', data.length, 'filas');
        console.log('Primeras 3 filas:', data.slice(0, 3));
        
        if (data.length < 2) return res.json({ success: false, error: 'El archivo Excel no tiene datos.' });
        
        // Procesar headers (primera fila)
        const headers = data[0].map(h => String(h).replace(/[^A-Z0-9_]/gi, '').toUpperCase());
        console.log('Headers procesados:', headers);
        
        // Procesar datos (filas siguientes)
        const processedData = data.slice(1).map((row, idx) => {
          console.log(`Fila ${idx + 1}:`, row);
          
          // Solo procesar si la cantidad de columnas es igual a headers
          if (row.length !== headers.length) {
            console.log(`Fila ignorada (cantidad columnas): ${row.length} vs ${headers.length}`, row);
            return null;
          }
          
          // Solo procesar si PERIANO y PERIMES son num√©ricos
          const anioIdx = headers.indexOf('PERIANO');
          const mesIdx = headers.indexOf('PERIMES');
          
          if (anioIdx === -1 || mesIdx === -1) {
            console.log(`Fila ignorada (no encuentra PERIANO o PERIMES):`, row);
            return null;
          }
          
          const anioVal = row[anioIdx] ? String(row[anioIdx]).trim() : '';
          const mesVal = row[mesIdx] ? String(row[mesIdx]).trim() : '';
          
          if (isNaN(Number(anioVal)) || isNaN(Number(mesVal))) {
            console.log(`Fila ignorada (PERIANO/PERIMES no num√©rico): PERIANO=${anioVal}, PERIMES=${mesVal}`, row);
            return null;
          }
          
          const obj = {};
          headers.forEach((h, i) => { obj[h] = row[i] ? String(row[i]).trim() : ''; });
          return obj;
        }).filter(x => x !== null);
        
        console.log('Headers:', headers);
        console.log('Primeras filas procesadas:', processedData.slice(0, 3));
        console.log('Cantidad de filas procesadas:', processedData.length);
        
        return res.json({ success: true, data: processedData });
      } catch (excelErr) {
        return res.json({ success: false, error: 'Error al leer o parsear el archivo Excel: ' + excelErr.message });
      }
    } else {
      return res.json({ success: false, error: `Solo se permiten archivos de Excel. Formatos soportados: ${EXCEL_FORMATS.join(', ')}.` });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// ===== RUTAS PARA RANKING DE DIAGN√ìSTICO =====

// Configuraci√≥n de almacenamiento para ranking
const rankingStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const { establecimiento, categoria, anio } = req.params;
    if (!establecimiento || !categoria || !anio) {
      return cb(new Error('Faltan datos de establecimiento, categor√≠a o a√±o'), null);
    }
    const dir = path.join(__dirname, 'data', establecimiento, categoria, anio);
    fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  }
});
const rankingUpload = multer({ storage: rankingStorage });

// üóÇÔ∏è CONSTANTES Y FUNCIONES GLOBALES PARA DETECCI√ìN DE MESES
const MESES_NOMBRES = {
  'ENERO': ['enero', 'january', '01', 'ene', 'jan'],
  'FEBRERO': ['febrero', 'february', '02', 'feb'],
  'MARZO': ['marzo', 'march', '03', 'mar'],
  'ABRIL': ['abril', 'april', '04', 'abr', 'apr'],
  'MAYO': ['mayo', 'may', '05'],
  'JUNIO': ['junio', 'june', '06', 'jun'],
  'JULIO': ['julio', 'july', '07', 'jul'],
  'AGOSTO': ['agosto', 'august', '08', 'ago', 'aug'],
  'SEPTIEMBRE': ['septiembre', 'september', '09', 'sep'],
  'OCTUBRE': ['octubre', 'october', '10', 'oct'],
  'NOVIEMBRE': ['noviembre', 'november', '11', 'nov'],
  'DICIEMBRE': ['diciembre', 'december', '12', 'dic', 'dec']
};

// üîç FUNCI√ìN GLOBAL PARA DETECTAR MES DE ARCHIVO (PRIORIDAD AL CONTENIDO EXCEL)
function detectarMesDeArchivo(nombreArchivo, rutaCompleta) {
  console.log(`üîç [DETECTAR MES] Analizando archivo: ${nombreArchivo}`);
  
  // üéØ PRIORIDAD 1: LEER CONTENIDO DEL EXCEL (FUENTE DE VERDAD)
  try {
    if (!fs.existsSync(rutaCompleta)) {
      console.log(`‚ùå [DETECTAR MES] Archivo no existe: ${rutaCompleta}`);
      return null;
    }
    
    console.log(`üìñ [DETECTAR MES] Leyendo contenido del Excel...`);
    const workbook = XLSX.readFile(rutaCompleta);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    // Buscar fechas en las primeras filas (AMPLIADO)
    let fechaDesde = null;
    let fechaHasta = null;
    
    for (let i = 0; i < Math.min(data.length, 15); i++) {
      const row = data[i];
      if (row && row.length >= 2) {
        for (let j = 0; j < Math.min(row.length, 5); j++) {
          const cellValue = String(row[j]).toLowerCase();
          
          if (cellValue.includes('desde') && j + 1 < row.length) {
            fechaDesde = String(row[j + 1]);
            console.log(`üìÖ [DETECTAR MES] Encontrado "Desde": ${fechaDesde}`);
          }
          if (cellValue.includes('hasta') && j + 1 < row.length) {
            fechaHasta = String(row[j + 1]);
            console.log(`üìÖ [DETECTAR MES] Encontrado "Hasta": ${fechaHasta}`);
          }
        }
      }
    }
    
    if (fechaDesde && fechaHasta) {
      // Verificar si es todo el a√±o
      const esDesdeEnero = fechaDesde.includes('01/01/') || fechaDesde.includes('1/1/');
      const esHastaDiciembre = fechaHasta.includes('31/12/') || fechaHasta.includes('30/12/');
      
      if (esDesdeEnero && esHastaDiciembre) {
        console.log(`‚úÖ [DETECTAR MES] Archivo ${nombreArchivo} detectado como TODO EL A√ëO (${fechaDesde} - ${fechaHasta})`);
        return 'TODOS'; // Es archivo de todo el a√±o
      }
      
      // Si no es todo el a√±o, extraer mes espec√≠fico de la fecha "Desde"
      if (fechaDesde.includes('/')) {
        const partes = fechaDesde.split('/');
        if (partes.length >= 2) {
          // Soportar formatos DD/MM/YYYY, DD/MM/YY y MM/DD variants
          let mesNumero = null;
          
          // Intentar DD/MM primero (formato m√°s com√∫n)
          const dia = parseInt(partes[0]);
          const mes = parseInt(partes[1]);
          
          if (dia >= 1 && dia <= 31 && mes >= 1 && mes <= 12) {
            mesNumero = mes; // Formato DD/MM
          } else if (mes >= 1 && mes <= 31 && dia >= 1 && dia <= 12) {
            mesNumero = dia; // Formato MM/DD
          }
          
          if (mesNumero && mesNumero >= 1 && mesNumero <= 12) {
            const mesesArray = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 
                              'JULIO', 'AGOSTO', 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];
            const mesDetectado = mesesArray[mesNumero - 1];
            console.log(`‚úÖ [DETECTAR MES] MES DETECTADO desde Excel: ${nombreArchivo} ‚Üí ${mesDetectado} (${fechaDesde} - ${fechaHasta})`);
            console.log(`üéØ [DETECTAR MES] ¬°CONTENIDO EXCEL tiene PRIORIDAD sobre nombre de archivo!`);
            return mesDetectado;
          }
        }
      }
    } else {
      console.log(`‚ö†Ô∏è  [DETECTAR MES] No se encontraron fechas "Desde/Hasta" en Excel de ${nombreArchivo}`);
    }
  } catch (e) {
    console.log(`‚ùå [DETECTAR MES] Error al leer Excel ${nombreArchivo}:`, e.message);
  }
  
  // üéØ PRIORIDAD 2: SOLO SI NO SE DETECT√ì DEL EXCEL, BUSCAR EN NOMBRE DEL ARCHIVO
  console.log(`‚ö†Ô∏è  [DETECTAR MES] No se detect√≥ mes desde contenido Excel, intentando desde nombre de archivo...`);
  const nombreLower = nombreArchivo.toLowerCase();
  
  for (const [mes, variantes] of Object.entries(MESES_NOMBRES)) {
    for (const variante of variantes) {
      if (nombreLower.includes(variante.toLowerCase())) {
        console.log(`‚ö†Ô∏è  [DETECTAR MES] MES DETECTADO desde nombre (fallback): ${nombreArchivo} ‚Üí ${mes} (patr√≥n: ${variante})`);
        console.log(`üö® [DETECTAR MES] ADVERTENCIA: Usando nombre de archivo como fallback - verificar contenido Excel`);
        return mes;
      }
    }
  }
  
  console.log(`‚ùå [DETECTAR MES] No se pudo detectar mes para archivo: ${nombreArchivo}`);
  return null;
}

// Agregar middleware de logging para debug
app.use('/ranking', (req, res, next) => {
  console.log(`[RANKING] ${req.method} ${req.originalUrl}`);
  console.log('[RANKING] Params:', req.params);
  console.log('[RANKING] Query:', req.query);
  next();
});

// üîí MAP PARA PREVENIR UPLOADS SIMULT√ÅNEOS DEL MISMO ARCHIVO
const uploadsEnProceso = new Map();

// üßπ LIMPIAR UPLOADS ANTIGUOS CADA 5 MINUTOS
setInterval(() => {
  const ahora = Date.now();
  const tiempoLimite = 5 * 60 * 1000; // 5 minutos
  
  for (const [key, timestamp] of uploadsEnProceso.entries()) {
    if (ahora - timestamp > tiempoLimite) {
      uploadsEnProceso.delete(key);
      console.log('üßπ Limpieza autom√°tica de upload:', key);
    }
  }
}, 5 * 60 * 1000);

// Guardar archivo Excel para ranking por establecimiento, categor√≠a y a√±o
app.post('/ranking/guardar/:establecimiento/:categoria/:anio', rankingUpload.single('file'), async (req, res) => {
  try {
    const { establecimiento, categoria, anio } = req.params;
    console.log('[RANKING] POST /ranking/guardar/' + encodeURIComponent(establecimiento) + '/' + encodeURIComponent(categoria) + '/' + anio);
    console.log('[RANKING] Params:', req.params);
    console.log('[RANKING] Query:', req.query);
    console.log('Guardando archivo de ranking para:', { establecimiento, categoria, anio });
    
    if (!req.file) {
      console.log('‚ùå No se recibi√≥ archivo');
      return res.status(400).json({ success: false, error: 'No se recibi√≥ archivo.' });
    }
    
    // üîí PREVENIR UPLOADS SIMULT√ÅNEOS DEL MISMO ARCHIVO
    const uploadKey = `${establecimiento}_${categoria}_${anio}_${req.file.originalname}`;
    if (uploadsEnProceso.has(uploadKey)) {
      console.log('‚ö†Ô∏è  Upload duplicado detectado, rechazando:', uploadKey);
      return res.status(409).json({ 
        success: false, 
        error: 'Ya hay una subida en proceso para este archivo. Espera a que termine.' 
      });
    }
    
    uploadsEnProceso.set(uploadKey, Date.now());
    console.log('üîí Bloqueando upload:', uploadKey);
    
         console.log('Archivo recibido:', {
       originalname: req.file.originalname,
       mimetype: req.file.mimetype,
       size: req.file.size,
       path: req.file.path
     });
    
    // üîç DETECCI√ìN MEJORADA DE FECHAS Y A√ëOS EN ARCHIVOS EXCEL
    let fechaInfo = null;
    
    try {
      // ‚è≥ VERIFICAR QUE EL ARCHIVO NO EST√â BLOQUEADO ANTES DE LEERLO
      if (!fs.existsSync(req.file.path)) {
        throw new Error('Archivo no encontrado despu√©s de la subida');
      }
      
      // üîÑ REINTENTAR LECTURA SI EL ARCHIVO EST√Å BLOQUEADO
      let workbook;
      let reintentos = 0;
      const maxReintentos = 3;
      
      while (reintentos < maxReintentos) {
        try {
          workbook = XLSX.readFile(req.file.path);
          break; // √âxito, salir del bucle
        } catch (readError) {
          if (readError.code === 'EBUSY' || readError.code === 'EMFILE') {
            reintentos++;
            console.log(`‚è≥ Archivo bloqueado, reintento ${reintentos}/${maxReintentos} en 500ms...`);
            await new Promise(resolve => setTimeout(resolve, 500));
          } else {
            throw readError; // Error diferente, lanzar inmediatamente
          }
        }
      }
      
      if (!workbook) {
        throw new Error('No se pudo leer el archivo despu√©s de varios intentos');
      }
      
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      // üîç VALIDACI√ìN DE CONTENIDO VS CATEGOR√çA
      const categoriasValidas = {
        'Ranking de diagn√≥stico de emergencia': ['EMERGENCIA', 'URGENCIA'],
        'Ranking de diagn√≥sticos de atenci√≥n': ['ATENCI√ìN', 'ATENCION'],
        'Ranking de mortalidad': ['MORTALIDAD', 'MUERTE', 'FALLECIDO'],
        'Ranking de motivos de egresos': ['EGRESO', 'EGRESOS', 'ALTA', 'MOTIVO']
      };
      
      let tituloEncontrado = false;
      let tituloArchivo = '';
      
      // Buscar t√≠tulo en las primeras 10 filas
      for (let i = 0; i < Math.min(data.length, 10) && !tituloEncontrado; i++) {
        const row = data[i];
        if (row && row.length >= 1) {
          for (let j = 0; j < row.length; j++) {
            const cellValue = String(row[j]).toUpperCase();
            
            // Buscar si contiene "RANKING" y alguna palabra clave
            if (cellValue.includes('RANKING') && cellValue.length > 10) {
              tituloArchivo = cellValue;
              
              // Verificar si el t√≠tulo coincide con la categor√≠a seleccionada
              const palabrasClave = categoriasValidas[categoria];
              if (palabrasClave) {
                tituloEncontrado = palabrasClave.some(palabra => 
                  cellValue.includes(palabra)
                );
                
                if (tituloEncontrado) {
                  console.log(`‚úÖ T√çTULO V√ÅLIDO encontrado: "${tituloArchivo}"`);
                  console.log(`‚úÖ Coincide con categor√≠a: "${categoria}"`);
                  break;
                }
              }
            }
          }
        }
      }
      
      // Si no se encontr√≥ t√≠tulo v√°lido, rechazar archivo
      if (!tituloEncontrado) {
        console.log(`‚ùå T√çTULO NO V√ÅLIDO para categor√≠a "${categoria}"`);
        console.log(`üìã T√≠tulo encontrado: "${tituloArchivo}"`);
        console.log(`üîç Palabras clave esperadas: ${categoriasValidas[categoria]?.join(', ')}`);
        
        // Limpiar archivo subido
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
        }
        
        uploadsEnProceso.delete(uploadKey);
        
        return res.status(400).json({ 
          success: false, 
          error: `El archivo no corresponde a la categor√≠a "${categoria}". T√≠tulo encontrado: "${tituloArchivo}". Verifique que el archivo sea del tipo correcto.`,
          categoriaEsperada: categoria,
          tituloEncontrado: tituloArchivo
        });
      }
      
      // üìÖ B√öSQUEDA M√öLTIPLE DE FECHAS Y A√ëOS
      let fechaDesde = null;
      let fechaHasta = null;
      let a√±oDetectado = null;
      
      // üîç Estrategia 1: Buscar en filas "Desde" y "Hasta" (AMPLIADO)
      for (let i = 0; i < Math.min(data.length, 20); i++) {
        const row = data[i];
        if (row && row.length >= 1) {
          for (let j = 0; j < Math.min(row.length, 10); j++) {
            const cellValue = String(row[j]).toLowerCase();
            
            // Buscar "desde" en cualquier columna
            if (cellValue.includes('desde') && j + 1 < row.length) {
              fechaDesde = String(row[j + 1]);
              console.log(`üìÖ Encontrado "Desde" en fila ${i+1}, columna ${j+2}: ${fechaDesde}`);
            }
            
            // Buscar "hasta" en cualquier columna
            if (cellValue.includes('hasta') && j + 1 < row.length) {
              fechaHasta = String(row[j + 1]);
              console.log(`üìÖ Encontrado "Hasta" en fila ${i+1}, columna ${j+2}: ${fechaHasta}`);
            }
          }
        }
      }
      
      // üîç Estrategia 2: Buscar a√±os directamente en el contenido (NUEVO)
      if (!a√±oDetectado) {
        for (let i = 0; i < Math.min(data.length, 30); i++) {
          const row = data[i];
          if (row) {
            for (let j = 0; j < row.length; j++) {
              const cellValue = String(row[j]);
              
              // Buscar a√±os 2024, 2025, etc.
              const a√±oMatch = cellValue.match(/\b(202[0-9])\b/);
              if (a√±oMatch) {
                a√±oDetectado = parseInt(a√±oMatch[1]);
                console.log(`üéØ A√ëO DETECTADO en contenido: ${a√±oDetectado} (fila ${i+1}, columna ${j+1})`);
                break;
              }
              
              // Buscar fechas completas como "12/25", "25/12", etc.
              const fechaMatch = cellValue.match(/(\d{1,2})\/(\d{1,2})\/?(2[0-9])?/);
              if (fechaMatch && fechaMatch[3]) {
                a√±oDetectado = parseInt(`20${fechaMatch[3]}`);
                console.log(`üéØ A√ëO DETECTADO en fecha: ${a√±oDetectado} (${cellValue})`);
                break;
              }
            }
            if (a√±oDetectado) break;
          }
        }
      }
      
      // üîç Estrategia 3: Analizar nombre del archivo (NUEVO)
      if (!a√±oDetectado) {
        const nombreArchivo = req.file.originalname.toLowerCase();
        const a√±oEnNombre = nombreArchivo.match(/\b(202[0-9])\b/);
        if (a√±oEnNombre) {
          a√±oDetectado = parseInt(a√±oEnNombre[1]);
          console.log(`üéØ A√ëO DETECTADO en nombre de archivo: ${a√±oDetectado} (${nombreArchivo})`);
        }
      }
      
      console.log('üîç RESULTADO B√öSQUEDA:', { 
        fechaDesde, 
        fechaHasta, 
        a√±oDetectado,
        archivoAnalizado: req.file.originalname 
      });
      
      if (fechaDesde && fechaHasta) {
        // Extraer fechas desde y hasta con patrones m√°s flexibles
        const fechaDesdeMatch = fechaDesde.match(/(\d{1,2})\/(\d{1,2})\/(\d{2,4})/);
        const fechaHastaMatch = fechaHasta.match(/(\d{1,2})\/(\d{1,2})\/(\d{2,4})/);
        
        if (fechaDesdeMatch && fechaHastaMatch) {
          const diaDesde = parseInt(fechaDesdeMatch[1]);
          const mesDesde = parseInt(fechaDesdeMatch[2]);
          let yearDesde = parseInt(fechaDesdeMatch[3]);
          
          const diaHasta = parseInt(fechaHastaMatch[1]);
          const mesHasta = parseInt(fechaHastaMatch[2]);
          let yearHasta = parseInt(fechaHastaMatch[3]);
          
          // ‚úÖ MEJORADA: L√≥gica de conversi√≥n de a√±os de 2 d√≠gitos a 4 d√≠gitos
          if (yearDesde < 100) {
            // Para a√±os 00-49 ‚Üí 2000-2049, para a√±os 50-99 ‚Üí 1950-1999
            yearDesde = yearDesde <= 49 ? 2000 + yearDesde : 1900 + yearDesde;
          }
          if (yearHasta < 100) {
            yearHasta = yearHasta <= 49 ? 2000 + yearHasta : 1900 + yearHasta;
          }
          
          console.log(`‚úÖ DETECCI√ìN DE A√ëO: Excel: ${yearDesde}, Par√°metro: ${anio}`);
          
          const meses = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO',
                        'JULIO', 'AGOSTO', 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];
          
          // Verificar si es todo el a√±o (01/01 a 31/12 del mismo a√±o)
          const esTodosLosMeses = (
            diaDesde === 1 && mesDesde === 1 &&  // Empieza el 1 de enero
            ((diaHasta === 31 && mesHasta === 12) || // Termina el 31 de diciembre
             (diaHasta === 30 && mesHasta === 12)) && // O el 30 de diciembre (algunos archivos)
            yearDesde === yearHasta  // Mismo a√±o
          );
          
          if (esTodosLosMeses) {
            fechaInfo = {
              mes: 'TODOS',
              mesNumero: 0, // 0 indica todos los meses
              a√±o: yearDesde, // USAR EL A√ëO DETECTADO DEL ARCHIVO
              fechaCompleta: `${fechaDesde} - ${fechaHasta}`,
              archivo: req.file.originalname,
              esTodoElA√±o: true
            };
          } else {
            // Es un mes espec√≠fico, usar la fecha "desde"
            fechaInfo = {
              mes: meses[mesDesde - 1],
              mesNumero: mesDesde,
              a√±o: yearDesde, // USAR EL A√ëO DETECTADO DEL ARCHIVO
              fechaCompleta: `${fechaDesde} - ${fechaHasta}`,
              archivo: req.file.originalname,
              esTodoElA√±o: false
            };
          }
          
          console.log('‚úÖ FECHA EXTRA√çDA de "Desde/Hasta":', fechaInfo);
        }
      } else {
        // üéØ USAR A√ëO DETECTADO POR OTRAS ESTRATEGIAS O FALLBACK AL PAR√ÅMETRO
        const a√±oFinal = a√±oDetectado || parseInt(anio);
        const esMismoA√±o = a√±oFinal.toString() === anio;
        
        if (a√±oDetectado && !esMismoA√±o) {
          console.log(`üéØ USANDO A√ëO DETECTADO: ${a√±oDetectado} (diferente al par√°metro: ${anio})`);
        } else if (a√±oDetectado && esMismoA√±o) {
          console.log(`‚úÖ A√ëO DETECTADO COINCIDE con par√°metro: ${a√±oDetectado}`);
        } else {
          console.log(`‚ö†Ô∏è  NO SE DETECT√ì A√ëO, usando par√°metro: ${anio}`);
        }
        
        fechaInfo = {
          mes: 'DESCONOCIDO',
          mesNumero: 0,
          a√±o: a√±oFinal, // USAR A√ëO DETECTADO O PAR√ÅMETRO COMO FALLBACK
          fechaCompleta: a√±oDetectado 
            ? `A√±o detectado autom√°ticamente: ${a√±oDetectado}` 
            : 'Fecha no detectada - usando a√±o del par√°metro',
          archivo: req.file.originalname,
          esTodoElA√±o: false,
          sinFecha: !a√±oDetectado,
          a√±oDetectadoAutomaticamente: !!a√±oDetectado
        };
      }
    } catch (excelErr) {
      console.log('‚ùå Error al leer Excel:', excelErr.message);
      
      // üîç √öLTIMO INTENTO: Detectar a√±o del nombre del archivo
      let a√±oDelNombre = null;
      const nombreArchivo = req.file.originalname.toLowerCase();
      const a√±oEnNombre = nombreArchivo.match(/\b(202[0-9])\b/);
      if (a√±oEnNombre) {
        a√±oDelNombre = parseInt(a√±oEnNombre[1]);
        console.log(`üéØ A√ëO DETECTADO en nombre (como √∫ltimo recurso): ${a√±oDelNombre}`);
      }
      
      const a√±oFinal = a√±oDelNombre || parseInt(anio);
      
      fechaInfo = {
        mes: 'ERROR',
        mesNumero: 0,
        a√±o: a√±oFinal, // USAR A√ëO DETECTADO DEL NOMBRE O PAR√ÅMETRO
        fechaCompleta: a√±oDelNombre 
          ? `A√±o detectado del nombre del archivo: ${a√±oDelNombre}` 
          : 'Error al leer fechas - usando a√±o del par√°metro',
        archivo: req.file.originalname,
        esTodoElA√±o: false,
        error: true,
        a√±oDetectadoAutomaticamente: !!a√±oDelNombre
      };
    }
    
    // üéØ DETECTAR A√ëO AUTOM√ÅTICAMENTE USANDO LA FUNCI√ìN PRINCIPAL
    const anioDetectadoDelArchivo = detectarAnioDeArchivo(req.file.path);
    console.log(`üîç A√ëO DETECTADO del archivo: ${anioDetectadoDelArchivo}`);
    
    // ‚úÖ DECISI√ìN INTELIGENTE: Usar a√±o detectado del Excel si es diferente al par√°metro
    let anioAUsar = anio; // Por defecto el a√±o del par√°metro
    let cambioDeA√±o = false;
    
    // Priorizar a√±o detectado por la funci√≥n principal si existe
    if (anioDetectadoDelArchivo && anioDetectadoDelArchivo.toString() !== anio) {
      anioAUsar = anioDetectadoDelArchivo.toString();
      cambioDeA√±o = true;
      console.log(`üîÑ CAMBIO AUTOM√ÅTICO DE A√ëO (funci√≥n principal): ${anio} ‚Üí ${anioAUsar} (detectado del Excel)`);
    } else if (fechaInfo && fechaInfo.a√±o && fechaInfo.a√±o.toString() !== anio) {
      anioAUsar = fechaInfo.a√±o.toString();
      cambioDeA√±o = true;
      console.log(`üîÑ CAMBIO AUTOM√ÅTICO DE A√ëO (fechaInfo): ${anio} ‚Üí ${anioAUsar} (detectado del Excel)`);
    } else if (anioDetectadoDelArchivo && anioDetectadoDelArchivo.toString() === anio) {
      console.log(`‚úÖ A√ëO COINCIDE: ${anio} (Excel y par√°metro iguales)`);
    } else if (fechaInfo && fechaInfo.a√±o && fechaInfo.a√±o.toString() === anio) {
      console.log(`‚úÖ A√ëO COINCIDE: ${anio} (Excel y par√°metro iguales)`);
    } else {
      console.log(`‚ö†Ô∏è  USANDO A√ëO DEL PAR√ÅMETRO: ${anio} (no se detect√≥ a√±o del Excel)`);
    }
    
    // üìÇ ORGANIZACI√ìN MEJORADA: Crear subcarpeta por mes detectado
    let mesDetectado = fechaInfo?.mes;
    
    // üîç ESTRATEGIA MEJORADA: Detectar mes desde m√∫ltiples fuentes
    console.log('üîç Intentando detectar mes desde nombre de archivo...');
    const mesDesdeNombre = detectarMesDeArchivo(req.file.originalname, req.file.path);
    
    // üîç ESTRATEGIA ADICIONAL: Si hay fecha detectada pero no mes, extraer mes de la fecha
    let mesDetectadoFinal = mesDetectado;
    
    if (mesDesdeNombre && mesDesdeNombre !== 'TODOS') {
      mesDetectadoFinal = mesDesdeNombre;
      console.log(`‚úÖ MES DETECTADO desde nombre de archivo: ${mesDetectadoFinal}`);
    } else if (!mesDetectadoFinal || mesDetectadoFinal === 'DESCONOCIDO' || mesDetectadoFinal === 'ERROR') {
      // üéØ NUEVA ESTRATEGIA: Buscar fechas directamente en el Excel para extraer mes
      console.log('üîç Buscando fechas en Excel para extraer mes...');
      try {
        const workbook = XLSX.readFile(req.file.path);
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        // Buscar cualquier fecha en las primeras 30 filas
        for (let i = 0; i < Math.min(30, data.length); i++) {
          if (!data[i]) continue;
          for (let j = 0; j < Math.min(10, data[i].length); j++) {
            let cellValue = data[i][j];
            if (!cellValue) continue;
            
            cellValue = cellValue.toString().trim();
            
            // Buscar patrones de fecha (dd/mm/yy, dd/mm/yyyy, etc.)
            const fechaPatterns = [
              /(\d{1,2})\/(\d{1,2})\/\d{2,4}/, // dd/mm/yy o dd/mm/yyyy
              /(\d{1,2})-(\d{1,2})-\d{2,4}/,  // dd-mm-yy o dd-mm-yyyy
              /(\d{4})-(\d{1,2})-(\d{1,2})/   // yyyy-mm-dd
            ];
            
            for (const pattern of fechaPatterns) {
              const fechaMatch = cellValue.match(pattern);
              if (fechaMatch) {
                let mesNumero;
                
                // Determinar posici√≥n del mes seg√∫n el patr√≥n
                if (pattern.source.includes('(\\\\d{4})')) {
                  // yyyy-mm-dd: mes est√° en posici√≥n 2
                  mesNumero = parseInt(fechaMatch[2]);
                } else {
                  // dd/mm/yy o dd-mm-yy: mes est√° en posici√≥n 2
                  mesNumero = parseInt(fechaMatch[2]);
                }
                
                const mesesNombres = ['', 'ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 
                                    'JULIO', 'AGOSTO', 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];
                
                if (mesNumero >= 1 && mesNumero <= 12) {
                  mesDetectadoFinal = mesesNombres[mesNumero];
                  console.log(`‚úÖ MES EXTRA√çDO de fecha en Excel: ${cellValue} ‚Üí ${mesDetectadoFinal}`);
                  break;
                }
              }
            }
            if (mesDetectadoFinal && mesDetectadoFinal !== 'DESCONOCIDO' && mesDetectadoFinal !== 'ERROR') break;
          }
          if (mesDetectadoFinal && mesDetectadoFinal !== 'DESCONOCIDO' && mesDetectadoFinal !== 'ERROR') break;
        }
             } catch (err) {
         console.log('‚ö†Ô∏è  Error al buscar fechas en Excel:', err.message);
       }
     }
     
     // üîç VERIFICACI√ìN FINAL
     if (!mesDetectadoFinal || mesDetectadoFinal === 'DESCONOCIDO' || mesDetectadoFinal === 'ERROR') {
       console.log('‚ùå No se pudo detectar mes desde ninguna fuente');
     } else {
       console.log(`‚úÖ MES DETECTADO FINAL: ${mesDetectadoFinal}`);
     }
    
    mesDetectado = mesDetectadoFinal;
    
    let dirCorrecto;
    let archivoFinal = req.file.originalname;
    
    if (mesDetectado && mesDetectado !== 'DESCONOCIDO' && mesDetectado !== 'ERROR' && mesDetectado !== 'TODOS') {
      // üìÅ CREAR CARPETA DEL MES ESPEC√çFICO
      dirCorrecto = path.join(__dirname, 'data', establecimiento, categoria, anioAUsar, mesDetectado);
      console.log(`üìÇ ORGANIZACI√ìN POR MES: ${dirCorrecto} (mes: ${mesDetectado})`);
      
      // üîÑ REEMPLAZAR ARCHIVO EXISTENTE EN EL MES (solo mantener uno por mes)
      const archivosExistentes = fs.existsSync(dirCorrecto) ? fs.readdirSync(dirCorrecto) : [];
      if (archivosExistentes.length > 0) {
        // Eliminar archivos existentes en esta carpeta de mes
        archivosExistentes.forEach(archivo => {
          const rutaArchivo = path.join(dirCorrecto, archivo);
          console.log(`üóëÔ∏è  ELIMINANDO archivo anterior: ${rutaArchivo}`);
          fs.unlinkSync(rutaArchivo);
        });
      }
      
      // üéØ SIEMPRE RENOMBRAR AL MES: No importa el nombre original, siempre usar "MES.xls"
      archivoFinal = `${mesDetectado}.xls`;
      console.log(`üìù RENOMBRANDO archivo: "${req.file.originalname}" ‚Üí "${archivoFinal}"`);
      
    } else if (mesDetectado === 'TODOS') {
      // üìÖ ARCHIVO DE TODO EL A√ëO
      dirCorrecto = path.join(__dirname, 'data', establecimiento, categoria, anioAUsar);
      console.log(`üìÖ ARCHIVO TODO EL A√ëO: ${dirCorrecto}`);
      archivoFinal = 'TODO_EL_A√ëO.xls';
      console.log(`üìù RENOMBRANDO archivo: "${req.file.originalname}" ‚Üí "${archivoFinal}"`);
      
    } else {
      // üìÅ USAR CARPETA DEL A√ëO DIRECTAMENTE SI NO SE DETECTA MES
      dirCorrecto = path.join(__dirname, 'data', establecimiento, categoria, anioAUsar);
      console.log(`üìÅ Directorio base (sin mes detectado): ${dirCorrecto}`);
      console.log(`üìÑ MANTENIENDO nombre original: "${req.file.originalname}"`);
    }
    
    console.log(`üìÅ Directorio correcto: ${dirCorrecto}`);
    
    // Crear directorio de destino
    fs.mkdirSync(dirCorrecto, { recursive: true });
    console.log('üìÅ Directorio creado/verificado');
    
    // üìù DETERMINAR RUTA FINAL DEL ARCHIVO
    const rutaArchivoFinal = path.join(dirCorrecto, archivoFinal);
    
    // üîÑ MOVER/RENOMBRAR ARCHIVO SI ES NECESARIO
    if (req.file.path !== rutaArchivoFinal) {
      const archivoOriginal = req.file.path;
      
      console.log('üìÇ Moviendo/renombrando archivo:');
      console.log('   Desde:', archivoOriginal);
      console.log('   Hacia:', rutaArchivoFinal);
      
      // Copiar archivo con el nuevo nombre
      fs.copyFileSync(archivoOriginal, rutaArchivoFinal);
      fs.unlinkSync(archivoOriginal);
      
      // Actualizar la ruta en req.file
      req.file.path = rutaArchivoFinal;
      req.file.filename = archivoFinal;
      
      // Limpiar directorio vac√≠o si qued√≥ vac√≠o
      try {
        const dirOriginal = path.dirname(archivoOriginal);
        if (dirOriginal !== dirCorrecto) {
          const archivosEnDirOriginal = fs.readdirSync(dirOriginal);
          if (archivosEnDirOriginal.length === 0) {
            fs.rmdirSync(dirOriginal);
            console.log('üßπ Directorio vac√≠o eliminado:', dirOriginal);
          }
        }
      } catch (e) {
        console.log('‚ö†Ô∏è  No se pudo eliminar directorio:', e.message);
      }
    }
    
    console.log('‚úÖ Archivo guardado en:', req.file.path);
    console.log('üìÑ Nombre final del archivo:', archivoFinal);
    console.log('üîç ¬øExiste el archivo guardado?', fs.existsSync(req.file.path));
    
    // üîì LIBERAR BLOQUEO DE UPLOAD
    uploadsEnProceso.delete(uploadKey);
    console.log('üîì Liberando bloqueo upload:', uploadKey);
    
    // üìÇ GENERAR MENSAJE DESCRIPTIVO
    let mensajeFinal = 'Archivo de ranking guardado correctamente.';
    
    if (cambioDeA√±o) {
      mensajeFinal = `Archivo guardado en carpeta ${anioAUsar} (auto-detectado del Excel)`;
    }
    
    if (mesDetectado && mesDetectado !== 'DESCONOCIDO' && mesDetectado !== 'ERROR') {
      mensajeFinal += ` üìÇ Organizado en subcarpeta: ${mesDetectado}`;
    }
    
    res.json({ 
      success: true, 
      message: mensajeFinal,
      fechaInfo: fechaInfo,
      anioDetectado: fechaInfo && fechaInfo.a√±o ? fechaInfo.a√±o.toString() : anio,
      anioUsado: anioAUsar,
      anioOriginal: anio,
      cambioAutomatico: cambioDeA√±o,
      organizadoPorMes: mesDetectado && mesDetectado !== 'DESCONOCIDO' && mesDetectado !== 'ERROR',
      mesDetectado: mesDetectado,
      archivoFinal: archivoFinal,
      ubicacionFinal: req.file.path
    });
  } catch (err) {
    console.error('‚ùå ERROR AL GUARDAR ARCHIVO DE RANKING:', err);
    
    // üîì LIBERAR BLOQUEO EN CASO DE ERROR
    const uploadKey = `${req.params.establecimiento}_${req.params.categoria}_${req.params.anio}_${req.file?.originalname || 'unknown'}`;
    uploadsEnProceso.delete(uploadKey);
    console.log('üîì Liberando bloqueo upload (error):', uploadKey);
    
    // üîç DETECTAR TIPO DE ERROR Y DAR MENSAJE ESPEC√çFICO
    let errorMessage = err.message;
    let errorCode = 500;
    
    if (err.code === 'EBUSY') {
      errorMessage = 'El archivo est√° siendo usado por otro programa. Cierra Excel y vuelve a intentar.';
      errorCode = 423; // Locked
    } else if (err.code === 'EACCES') {
      errorMessage = 'No hay permisos para acceder al archivo.';
      errorCode = 403; // Forbidden
    } else if (err.code === 'ENOENT') {
      errorMessage = 'El archivo no se encontr√≥.';
      errorCode = 404; // Not Found
    } else if (err.code === 'EMFILE') {
      errorMessage = 'Demasiados archivos abiertos. Intenta de nuevo en unos segundos.';
      errorCode = 429; // Too Many Requests
    }
    
    res.status(errorCode).json({ 
      success: false, 
      error: errorMessage,
      detalle: `Error t√©cnico: ${err.code || 'UNKNOWN'} - ${err.message}`,
      solucion: err.code === 'EBUSY' 
        ? 'Cierra Excel u otros programas que puedan estar usando el archivo'
        : 'Revisa que el archivo no est√© da√±ado y vuelve a intentar'
    });
  }
});

// Listar archivos por establecimiento, categor√≠a y a√±o
app.get('/ranking/archivos/:establecimiento/:categoria/:anio', authenticateToken, validarAccesoEstablecimiento, (req, res) => {
  try {
    const { establecimiento, categoria, anio } = req.params;
    const dir = path.join(__dirname, 'data', establecimiento, categoria, anio);
    
    if (!fs.existsSync(dir)) return res.json({ archivos: [] });
    
    const archivos = fs.readdirSync(dir)
      .filter(f => isValidExcelFormat(f))
      .map(f => ({ archivo: f }));
    
    res.json({ archivos });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// Leer archivo Excel de ranking y extraer top 4 diagn√≥sticos
app.get('/ranking/leer/:establecimiento/:categoria/:anio/:archivo', authenticateToken, validarAccesoEstablecimiento, async (req, res) => {
  try {
    const { establecimiento, categoria, anio, archivo } = req.params;
    console.log('Par√°metros recibidos para ranking:', { establecimiento, categoria, anio, archivo });
    
    const filePath = path.join(__dirname, 'data', establecimiento, categoria, anio, archivo);
    
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ success: false, error: 'Archivo no encontrado.' });
    }
    
    if (!isValidExcelFormat(archivo)) {
      return res.json({ success: false, error: `Solo se permiten archivos de Excel. Formatos soportados: ${EXCEL_FORMATS.join(', ')}.` });
    }

    try {
      // Leer archivo Excel
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      // Convertir a JSON
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      console.log('Datos Excel le√≠dos:', data.length, 'filas');
      
      if (data.length < 2) {
        return res.json({ success: false, error: 'El archivo Excel no tiene datos.' });
      }
      
      // Buscar la fila que contiene los headers (#, C√≥digo, Diagn√≥stico, Cantidad)
      let headerRowIndex = -1;
      for (let i = 0; i < data.length; i++) {
        const row = data[i];
        if (row && row.length >= 4) {
          const hasRequiredColumns = 
            (row[0] && String(row[0]).includes('#')) &&
            (row[1] && String(row[1]).toLowerCase().includes('c√≥digo')) &&
            (row[2] && String(row[2]).toLowerCase().includes('diagn√≥stico')) &&
            (row[3] && String(row[3]).toLowerCase().includes('cantidad'));
          
          if (hasRequiredColumns) {
            headerRowIndex = i;
            break;
          }
        }
      }
      
      if (headerRowIndex === -1) {
        return res.json({ success: false, error: 'No se encontraron las columnas requeridas (#, C√≥digo, Diagn√≥stico, Cantidad).' });
      }
      
      console.log('Headers encontrados en fila:', headerRowIndex);
      
      // Extraer los datos de diagn√≥sticos (m√°ximo 4)
      const diagnosticos = [];
      let count = 0;
      
      for (let i = headerRowIndex + 1; i < data.length && count < 4; i++) {
        const row = data[i];
        if (row && row.length >= 4) {
          const numero = row[0];
          const codigo = row[1];
          const diagnostico = row[2];
          const cantidad = row[3];
          
          // Validar que tiene datos v√°lidos
          if (codigo && diagnostico && cantidad && 
              String(codigo).trim() !== '' && 
              String(diagnostico).trim() !== '' && 
              !isNaN(Number(cantidad))) {
            
            diagnosticos.push({
              numero: Number(numero) || (count + 1),
              codigo: String(codigo).trim(),
              diagnostico: String(diagnostico).trim(),
              cantidad: Number(cantidad)
            });
            count++;
          }
        }
      }
      
      console.log('Diagn√≥sticos extra√≠dos:', diagnosticos);
      
      if (diagnosticos.length === 0) {
        return res.json({ success: false, error: 'No se encontraron diagn√≥sticos v√°lidos en el archivo.' });
      }
      
      return res.json({ 
        success: true, 
        data: diagnosticos,
        categoria: categoria,
        establecimiento: establecimiento
      });
      
    } catch (excelErr) {
      console.error('Error al procesar Excel:', excelErr);
      return res.json({ success: false, error: 'Error al leer o parsear el archivo Excel: ' + excelErr.message });
    }
  } catch (err) {
    console.error('Error general:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Analizar m√∫ltiples archivos por meses seleccionados
app.post('/ranking/analizar/:establecimiento/:categoria/:anio', authenticateToken, validarAccesoEstablecimiento, async (req, res) => {
  try {
    const { establecimiento, categoria, anio } = req.params;
    const { meses } = req.body; // Array de meses seleccionados
    
    console.log('[RANKING] Analizando ranking para:', { establecimiento, categoria, anio, meses });
    
    if (!meses || !Array.isArray(meses) || meses.length === 0) {
      return res.json({ success: false, error: 'Debe seleccionar al menos un mes.' });
    }
    
    const dirPrincipal = path.join(__dirname, 'data', establecimiento, categoria, anio);
    if (!fs.existsSync(dirPrincipal)) {
      return res.json({ success: false, error: 'No hay archivos para este establecimiento y categor√≠a.' });
    }
    
    // üìÇ B√öSQUEDA MEJORADA: Buscar archivos en subcarpetas de meses Y en carpeta principal
    const archivosEncontrados = [];
    
    // 1. Buscar en subcarpetas de meses espec√≠ficos
    for (const mes of meses) {
      const dirMes = path.join(dirPrincipal, mes);
      if (fs.existsSync(dirMes)) {
        const archivosDelMes = fs.readdirSync(dirMes).filter(f => isValidExcelFormat(f));
        for (const archivo of archivosDelMes) {
          archivosEncontrados.push({
            archivo: archivo,
            rutaCompleta: path.join(dirMes, archivo),
            mes: mes,
            origen: 'subcarpeta'
          });
        }
        console.log(`üìÇ Encontrados ${archivosDelMes.length} archivos en subcarpeta ${mes}:`, archivosDelMes);
      }
    }
    
    // 2. Buscar en carpeta principal (archivos sin organizar por mes)
    const archivosDirectos = fs.readdirSync(dirPrincipal).filter(f => 
      isValidExcelFormat(f) && 
      fs.statSync(path.join(dirPrincipal, f)).isFile()
    );
    
    console.log(`üìÅ Archivos en carpeta principal (${dirPrincipal}):`, archivosDirectos);
    
    if (archivosEncontrados.length === 0 && archivosDirectos.length === 0) {
      return res.json({ success: false, error: 'No hay archivos Excel en ninguna ubicaci√≥n.' });
    }
    
    // ‚úÖ CORREGIDO: Inicializar objetos de resultados dentro de la funci√≥n para cada llamada
    const resultadosPorMes = [];
    const todosLosResultados = {}; // Se reinicia en cada llamada
    const archivosEncontradosPorMes = {};
    
    // Mapa de nombres de meses
    const MESES_NOMBRES = {
      'ENERO': ['enero', 'january', '01', 'ene', 'jan'],
      'FEBRERO': ['febrero', 'february', '02', 'feb'],
      'MARZO': ['marzo', 'march', '03', 'mar'],
      'ABRIL': ['abril', 'april', '04', 'abr', 'apr'],
      'MAYO': ['mayo', 'may', '05'],
      'JUNIO': ['junio', 'june', '06', 'jun'],
      'JULIO': ['julio', 'july', '07', 'jul'],
      'AGOSTO': ['agosto', 'august', '08', 'ago', 'aug'],
      'SEPTIEMBRE': ['septiembre', 'september', '09', 'sep'],
      'OCTUBRE': ['octubre', 'october', '10', 'oct'],
      'NOVIEMBRE': ['noviembre', 'november', '11', 'nov'],
      'DICIEMBRE': ['diciembre', 'december', '12', 'dic', 'dec']
    };
    
    // ‚úÖ USAR FUNCI√ìN GLOBAL detectarMesDeArchivo (NO DUPLICAR FUNCI√ìN)
    
    // üìÇ PROCESAR ARCHIVOS: Tanto de subcarpetas como de carpeta principal
    const archivosParaProcesar = [];
    
    // 1. Procesar archivos ya encontrados en subcarpetas (tienen prioridad)
    for (const archivoInfo of archivosEncontrados) {
      if (meses.includes(archivoInfo.mes)) {
        archivosParaProcesar.push({
          archivo: archivoInfo.archivo,
          rutaCompleta: archivoInfo.rutaCompleta,
          mes: archivoInfo.mes,
          origen: archivoInfo.origen
        });
        
        if (!archivosEncontradosPorMes[archivoInfo.mes]) {
          archivosEncontradosPorMes[archivoInfo.mes] = [];
        }
        archivosEncontradosPorMes[archivoInfo.mes].push(archivoInfo.archivo);
        console.log(`‚úÖ Archivo ${archivoInfo.archivo} incluido para ${archivoInfo.mes} (desde subcarpeta)`);
      }
    }
    
    // 2. Procesar archivos de carpeta principal (solo si no hay archivo en subcarpeta para ese mes)
    for (const archivo of archivosDirectos) {
      const rutaCompleta = path.join(dirPrincipal, archivo);
      const mesDetectado = detectarMesDeArchivo(archivo, rutaCompleta);
      console.log(`üìÅ Archivo: ${archivo} ‚Üí Mes detectado: ${mesDetectado}`);
      
      if (mesDetectado && meses.includes(mesDetectado)) {
        // Solo incluir si no hay archivo en subcarpeta para este mes
        const yaExisteEnSubcarpeta = archivosEncontradosPorMes[mesDetectado]?.length > 0;
        
        if (!yaExisteEnSubcarpeta) {
          archivosParaProcesar.push({
            archivo: archivo,
            rutaCompleta: rutaCompleta,
            mes: mesDetectado,
            origen: 'principal'
          });
          
          if (!archivosEncontradosPorMes[mesDetectado]) {
            archivosEncontradosPorMes[mesDetectado] = [];
          }
          archivosEncontradosPorMes[mesDetectado].push(archivo);
          console.log(`‚úÖ Archivo ${archivo} incluido para ${mesDetectado} (desde carpeta principal)`);
        } else {
          console.log(`‚ö†Ô∏è  Archivo ${archivo} ignorado - ya existe archivo en subcarpeta para ${mesDetectado}`);
        }
      } else {
        console.log(`‚ùå Archivo ${archivo} excluido (mes: ${mesDetectado}, meses solicitados: ${meses.join(', ')})`);
      }
    }
    
    console.log('üìä Archivos encontrados por mes:', archivosEncontradosPorMes);
    console.log('üìÇ Archivos a procesar:', archivosParaProcesar.map(a => `${a.archivo} (${a.mes}) [${a.origen}]`));
    
    if (archivosParaProcesar.length === 0) {
      const mesesFaltantes = meses.filter(m => !archivosEncontradosPorMes[m]);
      return res.json({ 
        success: false, 
        error: `No se encontraron archivos para los meses seleccionados: ${mesesFaltantes.join(', ')}`,
        archivosDisponibles: archivosDirectos,
        subcarpetasEncontradas: archivosEncontrados.map(a => `${a.mes}/${a.archivo}`),
        mesesSolicitados: meses
      });
    }
    
    // üìä PROCESAR ARCHIVOS FILTRADOS (tanto de subcarpetas como de carpeta principal)
    for (const { archivo, rutaCompleta, mes, origen } of archivosParaProcesar) {
      try {
        console.log(`üîç Procesando: ${archivo} (${mes}) desde ${origen}...`);
        const workbook = XLSX.readFile(rutaCompleta);
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        // Buscar headers
        let headerRowIndex = -1;
        for (let i = 0; i < data.length; i++) {
          const row = data[i];
          if (row && row.length >= 4) {
            const hasRequiredColumns = 
              (row[0] && String(row[0]).includes('#')) &&
              (row[1] && String(row[1]).toLowerCase().includes('c√≥digo')) &&
              (row[2] && String(row[2]).toLowerCase().includes('diagn√≥stico')) &&
              (row[3] && String(row[3]).toLowerCase().includes('cantidad'));
            
            if (hasRequiredColumns) {
              headerRowIndex = i;
              break;
            }
          }
        }
        
        if (headerRowIndex !== -1) {
          // Extraer TODOS los diagn√≥sticos de este archivo (no solo los primeros 4)
          const diagnosticos = [];
          let diagnosticosContados = 0;
          
          console.log(`üìã Archivo ${archivo}: Total de filas en data: ${data.length}, headerRowIndex: ${headerRowIndex}`);
          
          for (let i = headerRowIndex + 1; i < data.length; i++) {
            const row = data[i];
            
            // Debug: mostrar cada fila para entender qu√© est√° pasando
            if (i <= headerRowIndex + 10) { // Solo mostrar las primeras 10 filas para no saturar el log
              console.log(`üîç Fila ${i}: [${row ? row.join(', ') : 'undefined'}]`);
            }
            
            if (row && row.length >= 4) {
              const codigo = row[1];
              const diagnostico = row[2];
              const cantidad = row[3];
              
              // Debug: mostrar por qu√© se rechaza una fila
              if (!codigo || !diagnostico || !cantidad) {
                if (i <= headerRowIndex + 10) {
                  console.log(`‚ùå Fila ${i} rechazada: codigo="${codigo}", diagnostico="${diagnostico}", cantidad="${cantidad}"`);
                }
                continue;
              }
              
              if (String(codigo).trim() === '' || String(diagnostico).trim() === '' || isNaN(Number(cantidad))) {
                if (i <= headerRowIndex + 10) {
                  console.log(`‚ùå Fila ${i} rechazada despu√©s de trim: codigo="${String(codigo).trim()}", diagnostico="${String(diagnostico).trim()}", cantidad="${Number(cantidad)}"`);
                }
                continue;
              }
              
              const key = String(codigo).trim();
              
              // üîç FILTRAR DIAGN√ìSTICOS NO DESEADOS
              if (key === 'Z012' || key === 'Z760' || 
                  String(diagnostico).trim().toLowerCase().includes('examen odontologico') ||
                  String(diagnostico).trim().toLowerCase().includes('consulta para repeticion de receta')) {
                if (i <= headerRowIndex + 10) {
                  console.log(`üö´ Fila ${i} filtrada: ${key} ${String(diagnostico).trim()} excluido`);
                }
                continue;
              }
              
              const diag = {
                codigo: key,
                diagnostico: String(diagnostico).trim(),
                cantidad: Number(cantidad)
              };
              
              diagnosticos.push(diag);
              diagnosticosContados++;
              
              // Acumular para totales generales
              if (!todosLosResultados[key]) {
                todosLosResultados[key] = {
                  codigo: key,
                  diagnostico: String(diagnostico).trim(),
                  cantidad: 0,
                  archivos: [] // Rastrear de qu√© archivos viene
                };
              }
              todosLosResultados[key].cantidad += Number(cantidad);
              todosLosResultados[key].archivos.push(`${archivo}(${cantidad})`);
              
              console.log(`üìä Sumando ${key}: ${diagnostico} ‚Üí +${cantidad} (total ahora: ${todosLosResultados[key].cantidad})`);
            } else {
              if (i <= headerRowIndex + 10) {
                console.log(`‚ùå Fila ${i} rechazada: row.length=${row ? row.length : 'undefined'}`);
              }
            }
          }
          
          console.log(`üìä Archivo ${archivo}: Se procesaron ${diagnosticosContados} diagn√≥sticos v√°lidos`);
          
          resultadosPorMes.push({
            archivo: archivo,
            mes: mes,
            diagnosticos: diagnosticos
          });
        } else {
          console.log(`‚ùå No se encontraron headers en archivo ${archivo}`);
        }
      } catch (fileError) {
        console.error(`Error procesando archivo ${archivo}:`, fileError);
      }
    }
    
    // Ordenar totales por cantidad y tomar top 4
    const totalesOrdenados = Object.values(todosLosResultados)
      .map(item => ({
        codigo: item.codigo,
        diagnostico: item.diagnostico,
        cantidad: item.cantidad
      })) // Limpiar el objeto
      .sort((a, b) => b.cantidad - a.cantidad)
      .slice(0, 4);
    
    console.log('üèÜ TOP 4 DIAGN√ìSTICOS FINALES:');
    totalesOrdenados.forEach((item, idx) => {
      console.log(`${idx + 1}. ${item.codigo} - ${item.diagnostico}: ${item.cantidad}`);
    });
    
    return res.json({
      success: true,
      resultadosPorMes: resultadosPorMes,
      totalesGenerales: totalesOrdenados,
      archivosEncontradosPorMes: archivosEncontradosPorMes,
      mesesSolicitados: meses,
      categoria: categoria,
      establecimiento: establecimiento,
      resumen: `Se analizaron ${archivosParaProcesar.length} archivo(s) para los meses: ${Object.keys(archivosEncontradosPorMes).join(', ')}`
    });
    
  } catch (err) {
    console.error('Error al analizar ranking:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// üè• ENDPOINT PARA LISTAR ESTABLECIMIENTOS
app.get('/establecimientos', (req, res) => {
  try {
    const establecimientos = {
      "Zona Norte": [
        "10 Nazareno"
      ],
      "Zona Sur": [
        "25 San Carlos"
      ]
    };
    
    res.json(establecimientos);
  } catch (err) {
    console.error('Error al obtener establecimientos:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

const atencionProfesionalStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const { establecimiento, anio, mes } = req.params;
    if (!establecimiento || !anio || !mes) {
      return cb(new Error('Faltan datos de establecimiento, a√±o o mes'), null);
    }
    const dir = path.join(__dirname, 'data', establecimiento, 'Atencion profesional por consultorio', anio, mes);
    fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  }
});
const atencionProfesionalUpload = multer({ storage: atencionProfesionalStorage });

// Endpoint para guardar archivo de atenci√≥n profesional por consultorio
app.post('/atencion-profesional/guardar/:establecimiento/:anio/:mes', atencionProfesionalUpload.single('file'), async (req, res) => {
  try {
    const { establecimiento, anio, mes } = req.params;
    if (!req.file) {
      return res.status(400).json({ success: false, error: 'No se recibi√≥ archivo.' });
    }
    res.json({
      success: true,
      message: 'Archivo guardado correctamente.',
      ubicacion: path.join('data', establecimiento, 'Atencion profesional por consultorio', anio, mes, req.file.originalname)
    });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// Endpoint para descargar archivo de atenci√≥n profesional por consultorio
app.get('/atencion-profesional/descargar/:establecimiento/:anio/:mes', (req, res) => {
  const { establecimiento, anio, mes } = req.params;
  const dir = path.join(__dirname, 'data', establecimiento, 'Atencion profesional por consultorio', anio, mes);
  if (!fs.existsSync(dir)) {
    return res.status(404).json({ success: false, error: 'No existe la carpeta para ese a√±o y mes.' });
  }
  const archivos = fs.readdirSync(dir).filter(f => f.endsWith('.xls') || f.endsWith('.xlsx'));
  if (archivos.length === 0) {
    return res.status(404).json({ success: false, error: 'No hay archivos Excel para ese a√±o y mes.' });
  }
  const archivo = archivos[0];
  const ruta = path.join(dir, archivo);
  res.download(ruta, archivo);
});

const guardiaStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const { establecimiento, anio, mes } = req.params;
    if (!establecimiento || !anio || !mes) {
      return cb(new Error('Faltan datos de establecimiento, a√±o o mes'), null);
    }
    const dir = path.join(__dirname, 'data', establecimiento, 'Guardia', anio, mes);
    fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  }
});
const guardiaUpload = multer({ storage: guardiaStorage });

// Endpoint para guardar archivo de guardia
app.post('/guardia/guardar/:establecimiento/:anio/:mes', guardiaUpload.single('file'), async (req, res) => {
  try {
    const { establecimiento, anio, mes } = req.params;
    if (!req.file) {
      return res.status(400).json({ success: false, error: 'No se recibi√≥ archivo.' });
    }
    res.json({
      success: true,
      message: 'Archivo de guardia guardado correctamente.',
      ubicacion: path.join('data', establecimiento, 'Guardia', anio, mes, req.file.originalname)
    });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// Endpoint para descargar archivo de guardia
app.get('/guardia/descargar/:establecimiento/:anio/:mes', (req, res) => {
  const { establecimiento, anio, mes } = req.params;
  const dir = path.join(__dirname, 'data', establecimiento, 'Guardia', anio, mes);
  if (!fs.existsSync(dir)) {
    return res.status(404).json({ success: false, error: 'No existe la carpeta para ese a√±o y mes.' });
  }
  const archivos = fs.readdirSync(dir).filter(f => f.endsWith('.xls') || f.endsWith('.xlsx'));
  if (archivos.length === 0) {
    return res.status(404).json({ success: false, error: 'No hay archivos Excel para ese a√±o y mes.' });
  }
  const archivo = archivos[0];
  const ruta = path.join(dir, archivo);
  res.download(ruta, archivo);
});

// Catch-all handler: SOLO para rutas que NO son archivos est√°ticos
app.get('*', (req, res) => {
  // NO servir index.html para archivos est√°ticos
  if (req.url.startsWith('/static/') || 
      req.url.endsWith('.js') || 
      req.url.endsWith('.css') || 
      req.url.endsWith('.map') ||
      req.url.endsWith('.ico') ||
      req.url.endsWith('.png') ||
      req.url.endsWith('.json')) {
    return res.status(404).send('File not found');
  }
  
  // Solo para rutas de React
  res.sendFile(path.join(__dirname, '../frontend/build/index.html'));
});

app.listen(5001, () => {
  console.log('Backend Excel server running on port 5001');
  console.log('Frontend available at: https://tablero-control-1.onrender.com');
}); 